// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.HybridNetwork;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.HybridNetwork.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmHybridNetworkModelFactory
    {
        /// <summary> Initializes a new instance of ConfigurationGroupSchemaData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The provisioning state of the Configuration group schema resource. </param>
        /// <param name="versionState"> The configuration group schema version state. </param>
        /// <param name="schemaDefinition"> Name and value pairs that define the configuration value. It can be a well formed escaped JSON string. </param>
        /// <returns> A new <see cref="HybridNetwork.ConfigurationGroupSchemaData"/> instance for mocking. </returns>
        public static ConfigurationGroupSchemaData ConfigurationGroupSchemaData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? provisioningState = null, VersionState? versionState = null, string schemaDefinition = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ConfigurationGroupSchemaData(id, name, resourceType, systemData, tags, location, provisioningState, versionState, schemaDefinition);
        }

        /// <summary> Initializes a new instance of ConfigurationGroupValueData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The provisioning state of the site resource. </param>
        /// <param name="publisherName"> The publisher name for the configuration group schema. </param>
        /// <param name="publisherScope"> The scope of the publisher. </param>
        /// <param name="configurationGroupSchemaName"> The configuration group schema name. </param>
        /// <param name="configurationGroupSchemaOfferingLocation"> The location of the configuration group schema offering. </param>
        /// <param name="configurationValue"> Name and value pairs that define the configuration value. It can be a well formed escaped JSON string. </param>
        /// <returns> A new <see cref="HybridNetwork.ConfigurationGroupValueData"/> instance for mocking. </returns>
        public static ConfigurationGroupValueData ConfigurationGroupValueData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? provisioningState = null, string publisherName = null, PublisherScope? publisherScope = null, string configurationGroupSchemaName = null, string configurationGroupSchemaOfferingLocation = null, string configurationValue = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ConfigurationGroupValueData(id, name, resourceType, systemData, tags, location, provisioningState, publisherName, publisherScope, configurationGroupSchemaName, configurationGroupSchemaOfferingLocation, configurationValue);
        }

        /// <summary> Initializes a new instance of NetworkFunctionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="identity"> The managed identity of the network function. </param>
        /// <param name="provisioningState"> The provisioning state of the network function resource. </param>
        /// <param name="publisherName"> The publisher name for the network function. </param>
        /// <param name="publisherScope"> The scope of the publisher. </param>
        /// <param name="networkFunctionDefinitionGroupName"> The network function definition group name for the network function. </param>
        /// <param name="networkFunctionDefinitionVersion"> The network function definition version for the network function. </param>
        /// <param name="networkFunctionDefinitionOfferingLocation"> The location of the network function definition offering. </param>
        /// <param name="nfviType"> The nfvi type for the network function. </param>
        /// <param name="nfviId"> The nfviId for the network function. </param>
        /// <param name="allowSoftwareUpdate"> Indicates if software updates are allowed during deployment. </param>
        /// <param name="deploymentValues"> The JSON-serialized deployment values from the user. </param>
        /// <param name="roleOverrideValues"> The role configuration override values from the user. </param>
        /// <returns> A new <see cref="HybridNetwork.NetworkFunctionData"/> instance for mocking. </returns>
        public static NetworkFunctionData NetworkFunctionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ETag? etag = null, ManagedServiceIdentity identity = null, ProvisioningState? provisioningState = null, string publisherName = null, PublisherScope? publisherScope = null, string networkFunctionDefinitionGroupName = null, string networkFunctionDefinitionVersion = null, string networkFunctionDefinitionOfferingLocation = null, NfviType? nfviType = null, string nfviId = null, bool? allowSoftwareUpdate = null, string deploymentValues = null, IEnumerable<string> roleOverrideValues = null)
        {
            tags ??= new Dictionary<string, string>();
            roleOverrideValues ??= new List<string>();

            return new NetworkFunctionData(id, name, resourceType, systemData, tags, location, etag, identity, provisioningState, publisherName, publisherScope, networkFunctionDefinitionGroupName, networkFunctionDefinitionVersion, networkFunctionDefinitionOfferingLocation, nfviType, nfviId, allowSoftwareUpdate, deploymentValues, roleOverrideValues?.ToList());
        }

        /// <summary> Initializes a new instance of ComponentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The provisioning state of the component resource. </param>
        /// <param name="deploymentProfile"> The JSON-serialized deployment profile of the component resource. </param>
        /// <param name="deploymentStatus"> The deployment status of the component resource. </param>
        /// <returns> A new <see cref="HybridNetwork.ComponentData"/> instance for mocking. </returns>
        public static ComponentData ComponentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, ProvisioningState? provisioningState = null, string deploymentProfile = null, DeploymentStatusProperties deploymentStatus = null)
        {
            return new ComponentData(id, name, resourceType, systemData, provisioningState, deploymentProfile, deploymentStatus);
        }

        /// <summary> Initializes a new instance of DeploymentStatusProperties. </summary>
        /// <param name="status"> The status of the component resource. </param>
        /// <param name="resources"> The resource related to the component resource. </param>
        /// <param name="nextExpectedUpdateOn"> The next expected update of deployment status. </param>
        /// <returns> A new <see cref="Models.DeploymentStatusProperties"/> instance for mocking. </returns>
        public static DeploymentStatusProperties DeploymentStatusProperties(Status? status = null, Resources resources = null, DateTimeOffset? nextExpectedUpdateOn = null)
        {
            return new DeploymentStatusProperties(status, resources, nextExpectedUpdateOn);
        }

        /// <summary> Initializes a new instance of Resources. </summary>
        /// <param name="deployments"> Deployments that are related to component resource. </param>
        /// <param name="pods"> Pods related to component resource. </param>
        /// <param name="replicaSets"> Replica sets related to component resource. </param>
        /// <param name="statefulSets"> Stateful sets related to component resource. </param>
        /// <param name="daemonSets"> Daemonsets related to component resource. </param>
        /// <returns> A new <see cref="Models.Resources"/> instance for mocking. </returns>
        public static Resources Resources(IEnumerable<Deployment> deployments = null, IEnumerable<Pod> pods = null, IEnumerable<ReplicaSet> replicaSets = null, IEnumerable<StatefulSet> statefulSets = null, IEnumerable<DaemonSet> daemonSets = null)
        {
            deployments ??= new List<Deployment>();
            pods ??= new List<Pod>();
            replicaSets ??= new List<ReplicaSet>();
            statefulSets ??= new List<StatefulSet>();
            daemonSets ??= new List<DaemonSet>();

            return new Resources(deployments?.ToList(), pods?.ToList(), replicaSets?.ToList(), statefulSets?.ToList(), daemonSets?.ToList());
        }

        /// <summary> Initializes a new instance of Deployment. </summary>
        /// <param name="name"> The name of the deployment. </param>
        /// <param name="namespace"> The namespace of the deployment. </param>
        /// <param name="desired"> Desired number of pods. </param>
        /// <param name="ready"> Number of ready pods. </param>
        /// <param name="upToDate"> Number of upto date pods. </param>
        /// <param name="available"> Number of available pods. </param>
        /// <param name="createdOn"> Creation Time of deployment. </param>
        /// <returns> A new <see cref="Models.Deployment"/> instance for mocking. </returns>
        public static Deployment Deployment(string name = null, string @namespace = null, int? desired = null, int? ready = null, int? upToDate = null, int? available = null, DateTimeOffset? createdOn = null)
        {
            return new Deployment(name, @namespace, desired, ready, upToDate, available, createdOn);
        }

        /// <summary> Initializes a new instance of Pod. </summary>
        /// <param name="name"> The name of the Pod. </param>
        /// <param name="namespace"> The namespace of the Pod. </param>
        /// <param name="desired"> Desired number of containers. </param>
        /// <param name="ready"> Number of ready containers. </param>
        /// <param name="status"> The status of a pod. </param>
        /// <param name="createdOn"> Creation Time of Pod. </param>
        /// <param name="events"> Last 5 Pod events. </param>
        /// <returns> A new <see cref="Models.Pod"/> instance for mocking. </returns>
        public static Pod Pod(string name = null, string @namespace = null, int? desired = null, int? ready = null, PodStatus? status = null, DateTimeOffset? createdOn = null, IEnumerable<PodEvent> events = null)
        {
            events ??= new List<PodEvent>();

            return new Pod(name, @namespace, desired, ready, status, createdOn, events?.ToList());
        }

        /// <summary> Initializes a new instance of PodEvent. </summary>
        /// <param name="eventType"> The type of pod event. </param>
        /// <param name="reason"> Event reason. </param>
        /// <param name="message"> Event message. </param>
        /// <param name="lastSeenOn"> Event Last seen. </param>
        /// <returns> A new <see cref="Models.PodEvent"/> instance for mocking. </returns>
        public static PodEvent PodEvent(PodEventType? eventType = null, string reason = null, string message = null, DateTimeOffset? lastSeenOn = null)
        {
            return new PodEvent(eventType, reason, message, lastSeenOn);
        }

        /// <summary> Initializes a new instance of ReplicaSet. </summary>
        /// <param name="name"> The name of the replicaSet. </param>
        /// <param name="namespace"> The namespace of the replicaSet. </param>
        /// <param name="desired"> Desired number of pods. </param>
        /// <param name="ready"> Number of ready pods. </param>
        /// <param name="current"> Number of current pods. </param>
        /// <param name="createdOn"> Creation Time of replicaSet. </param>
        /// <returns> A new <see cref="Models.ReplicaSet"/> instance for mocking. </returns>
        public static ReplicaSet ReplicaSet(string name = null, string @namespace = null, int? desired = null, int? ready = null, int? current = null, DateTimeOffset? createdOn = null)
        {
            return new ReplicaSet(name, @namespace, desired, ready, current, createdOn);
        }

        /// <summary> Initializes a new instance of StatefulSet. </summary>
        /// <param name="name"> The name of the statefulset. </param>
        /// <param name="namespace"> The namespace of the statefulset. </param>
        /// <param name="desired"> Desired number of pods. </param>
        /// <param name="ready"> Number of ready pods. </param>
        /// <param name="createdOn"> Creation Time of statefulset. </param>
        /// <returns> A new <see cref="Models.StatefulSet"/> instance for mocking. </returns>
        public static StatefulSet StatefulSet(string name = null, string @namespace = null, int? desired = null, int? ready = null, DateTimeOffset? createdOn = null)
        {
            return new StatefulSet(name, @namespace, desired, ready, createdOn);
        }

        /// <summary> Initializes a new instance of DaemonSet. </summary>
        /// <param name="name"> The name of the daemonSet. </param>
        /// <param name="namespace"> The namespace of the daemonSet. </param>
        /// <param name="desired"> Desired number of pods. </param>
        /// <param name="current"> Current number of pods. </param>
        /// <param name="ready"> Number of Ready pods. </param>
        /// <param name="upToDate"> Number of  upto date pods. </param>
        /// <param name="available"> Number of available pods. </param>
        /// <param name="createdOn"> Creation Time of daemonSet. </param>
        /// <returns> A new <see cref="Models.DaemonSet"/> instance for mocking. </returns>
        public static DaemonSet DaemonSet(string name = null, string @namespace = null, int? desired = null, int? current = null, int? ready = null, int? upToDate = null, int? available = null, DateTimeOffset? createdOn = null)
        {
            return new DaemonSet(name, @namespace, desired, current, ready, upToDate, available, createdOn);
        }

        /// <summary> Initializes a new instance of NetworkFunctionDefinitionGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The provisioning state of the network function definition groups resource. </param>
        /// <param name="description"> The network function definition group description. </param>
        /// <returns> A new <see cref="HybridNetwork.NetworkFunctionDefinitionGroupData"/> instance for mocking. </returns>
        public static NetworkFunctionDefinitionGroupData NetworkFunctionDefinitionGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? provisioningState = null, string description = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkFunctionDefinitionGroupData(id, name, resourceType, systemData, tags, location, provisioningState, description);
        }

        /// <summary> Initializes a new instance of NetworkServiceDesignGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The provisioning state of the network service design groups resource. </param>
        /// <param name="description"> The network service design group description. </param>
        /// <returns> A new <see cref="HybridNetwork.NetworkServiceDesignGroupData"/> instance for mocking. </returns>
        public static NetworkServiceDesignGroupData NetworkServiceDesignGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? provisioningState = null, string description = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkServiceDesignGroupData(id, name, resourceType, systemData, tags, location, provisioningState, description);
        }

        /// <summary> Initializes a new instance of NetworkServiceDesignVersionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The provisioning state of the network service design version resource. </param>
        /// <param name="versionState"> The network service design version state. </param>
        /// <param name="description"> The network service design version description. </param>
        /// <param name="configurationGroupSchemaReferences"> The configuration schemas to used to define the values. </param>
        /// <param name="nfvisFromSite"> The nfvis from the site. </param>
        /// <param name="resourceElementTemplates">
        /// List of resource element template
        /// Please note <see cref="ResourceElementTemplate"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ArmResourceDefinitionResourceElementTemplateDetails"/> and <see cref="NetworkFunctionDefinitionResourceElementTemplateDetails"/>.
        /// </param>
        /// <returns> A new <see cref="HybridNetwork.NetworkServiceDesignVersionData"/> instance for mocking. </returns>
        public static NetworkServiceDesignVersionData NetworkServiceDesignVersionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? provisioningState = null, VersionState? versionState = null, string description = null, IDictionary<string, WritableSubResource> configurationGroupSchemaReferences = null, IDictionary<string, NfviDetails> nfvisFromSite = null, IEnumerable<ResourceElementTemplate> resourceElementTemplates = null)
        {
            tags ??= new Dictionary<string, string>();
            configurationGroupSchemaReferences ??= new Dictionary<string, WritableSubResource>();
            nfvisFromSite ??= new Dictionary<string, NfviDetails>();
            resourceElementTemplates ??= new List<ResourceElementTemplate>();

            return new NetworkServiceDesignVersionData(id, name, resourceType, systemData, tags, location, provisioningState, versionState, description, configurationGroupSchemaReferences, nfvisFromSite, resourceElementTemplates?.ToList());
        }

        /// <summary> Initializes a new instance of ProxyPublisherOverviewData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <returns> A new <see cref="HybridNetwork.ProxyPublisherOverviewData"/> instance for mocking. </returns>
        public static ProxyPublisherOverviewData ProxyPublisherOverviewData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null)
        {
            return new ProxyPublisherOverviewData(id, name, resourceType, systemData);
        }

        /// <summary> Initializes a new instance of NetworkFunctionDefinitionGroupOverviewData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> Network function definition group description. </param>
        /// <returns> A new <see cref="HybridNetwork.NetworkFunctionDefinitionGroupOverviewData"/> instance for mocking. </returns>
        public static NetworkFunctionDefinitionGroupOverviewData NetworkFunctionDefinitionGroupOverviewData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, string description = null)
        {
            return new NetworkFunctionDefinitionGroupOverviewData(id, name, resourceType, systemData, description);
        }

        /// <summary> Initializes a new instance of NetworkFunctionDefinitionVersionOverviewData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> The network function definition version description properties. </param>
        /// <param name="versionState"> The network function definition version state. </param>
        /// <param name="networkFunctionType"> The network function type. </param>
        /// <param name="nfviType"> The nfvi type for the network function. </param>
        /// <param name="deployParameters"> The deployment parameters. </param>
        /// <param name="networkFunctionApplications">
        /// The network function definition application overview.
        /// Please note <see cref="NetworkFunctionDefinitionApplicationOverview"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ArmTemplateApplicationOverview"/>, <see cref="HelmPackageApplicationOverview"/> and <see cref="VhdImageFileApplicationOverview"/>.
        /// </param>
        /// <returns> A new <see cref="HybridNetwork.NetworkFunctionDefinitionVersionOverviewData"/> instance for mocking. </returns>
        public static NetworkFunctionDefinitionVersionOverviewData NetworkFunctionDefinitionVersionOverviewData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, string description = null, VersionState? versionState = null, NetworkFunctionType? networkFunctionType = null, NfviType? nfviType = null, string deployParameters = null, IEnumerable<NetworkFunctionDefinitionApplicationOverview> networkFunctionApplications = null)
        {
            networkFunctionApplications ??= new List<NetworkFunctionDefinitionApplicationOverview>();

            return new NetworkFunctionDefinitionVersionOverviewData(id, name, resourceType, systemData, description, versionState, networkFunctionType, nfviType, deployParameters, networkFunctionApplications?.ToList());
        }

        /// <summary> Initializes a new instance of NetworkFunctionDefinitionApplicationOverview. </summary>
        /// <param name="name"> The name of the application. </param>
        /// <param name="artifactType"> The application overview artifact type. </param>
        /// <returns> A new <see cref="Models.NetworkFunctionDefinitionApplicationOverview"/> instance for mocking. </returns>
        public static NetworkFunctionDefinitionApplicationOverview NetworkFunctionDefinitionApplicationOverview(string name = null, string artifactType = "Unknown")
        {
            return new UnknownNetworkFunctionDefinitionApplicationOverview(name, artifactType);
        }

        /// <summary> Initializes a new instance of NetworkServiceDesignGroupOverviewData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> Network service design group properties. </param>
        /// <returns> A new <see cref="HybridNetwork.NetworkServiceDesignGroupOverviewData"/> instance for mocking. </returns>
        public static NetworkServiceDesignGroupOverviewData NetworkServiceDesignGroupOverviewData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, string description = null)
        {
            return new NetworkServiceDesignGroupOverviewData(id, name, resourceType, systemData, description);
        }

        /// <summary> Initializes a new instance of NetworkServiceDesignVersionOverviewData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="description"> The network service design version description properties. </param>
        /// <param name="versionState"> The network service design version state. </param>
        /// <param name="configurationGroupSchemaReferences"> Configuration Group Schema References. </param>
        /// <param name="nfvisFromSite"> The nfvis from the site. </param>
        /// <returns> A new <see cref="HybridNetwork.NetworkServiceDesignVersionOverviewData"/> instance for mocking. </returns>
        public static NetworkServiceDesignVersionOverviewData NetworkServiceDesignVersionOverviewData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, string description = null, VersionState? versionState = null, IDictionary<string, ConfigurationGroupSchemaReferences> configurationGroupSchemaReferences = null, IDictionary<string, NfviDetails> nfvisFromSite = null)
        {
            configurationGroupSchemaReferences ??= new Dictionary<string, ConfigurationGroupSchemaReferences>();
            nfvisFromSite ??= new Dictionary<string, NfviDetails>();

            return new NetworkServiceDesignVersionOverviewData(id, name, resourceType, systemData, description, versionState, configurationGroupSchemaReferences, nfvisFromSite);
        }

        /// <summary> Initializes a new instance of PublisherData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed identity of the publisher, if configured. </param>
        /// <param name="provisioningState"> The provisioning state of the publisher resource. </param>
        /// <param name="scope"> The publisher scope. </param>
        /// <returns> A new <see cref="HybridNetwork.PublisherData"/> instance for mocking. </returns>
        public static PublisherData PublisherData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, ProvisioningState? provisioningState = null, PublisherScope? scope = null)
        {
            tags ??= new Dictionary<string, string>();

            return new PublisherData(id, name, resourceType, systemData, tags, location, identity, provisioningState, scope);
        }

        /// <summary> Initializes a new instance of ArtifactStoreData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The provisioning state of the application groups resource. </param>
        /// <param name="storeType"> The artifact store type. </param>
        /// <param name="replicationStrategy"> The replication strategy. </param>
        /// <param name="managedResourceGroupConfiguration"></param>
        /// <param name="storageResourceId"> The created storage resource id. </param>
        /// <returns> A new <see cref="HybridNetwork.ArtifactStoreData"/> instance for mocking. </returns>
        public static ArtifactStoreData ArtifactStoreData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? provisioningState = null, ArtifactStoreType? storeType = null, ArtifactReplicationStrategy? replicationStrategy = null, ArtifactStorePropertiesFormatManagedResourceGroupConfiguration managedResourceGroupConfiguration = null, string storageResourceId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ArtifactStoreData(id, name, resourceType, systemData, tags, location, provisioningState, storeType, replicationStrategy, managedResourceGroupConfiguration, storageResourceId);
        }

        /// <summary> Initializes a new instance of ArtifactManifestData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The provisioning state of the ArtifactManifest resource. </param>
        /// <param name="artifactManifestState"> The artifact manifest state. </param>
        /// <param name="artifacts"> The artifacts list. </param>
        /// <returns> A new <see cref="HybridNetwork.ArtifactManifestData"/> instance for mocking. </returns>
        public static ArtifactManifestData ArtifactManifestData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? provisioningState = null, ArtifactManifestState? artifactManifestState = null, IEnumerable<ManifestArtifactFormat> artifacts = null)
        {
            tags ??= new Dictionary<string, string>();
            artifacts ??= new List<ManifestArtifactFormat>();

            return new ArtifactManifestData(id, name, resourceType, systemData, tags, location, provisioningState, artifactManifestState, artifacts?.ToList());
        }

        /// <summary> Initializes a new instance of ProxyArtifactListOverview. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <returns> A new <see cref="Models.ProxyArtifactListOverview"/> instance for mocking. </returns>
        public static ProxyArtifactListOverview ProxyArtifactListOverview(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null)
        {
            return new ProxyArtifactListOverview(id, name, resourceType, systemData);
        }

        /// <summary> Initializes a new instance of ProxyArtifactVersionsListOverview. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="artifactType"> The artifact type. </param>
        /// <param name="artifactVersion"> The artifact version. </param>
        /// <param name="artifactState"> The artifact state. </param>
        /// <returns> A new <see cref="Models.ProxyArtifactVersionsListOverview"/> instance for mocking. </returns>
        public static ProxyArtifactVersionsListOverview ProxyArtifactVersionsListOverview(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, ArtifactType? artifactType = null, string artifactVersion = null, ArtifactState? artifactState = null)
        {
            return new ProxyArtifactVersionsListOverview(id, name, resourceType, systemData, artifactType, artifactVersion, artifactState);
        }

        /// <summary> Initializes a new instance of SiteData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> The provisioning state of the site resource. **TODO**: Confirm if this is needed. </param>
        /// <param name="nfvis">
        /// List of NFVIs
        /// Please note <see cref="NFVIs"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureArcK8SClusterNfviDetails"/>, <see cref="AzureCoreNfviDetails"/> and <see cref="AzureOperatorNexusClusterNfviDetails"/>.
        /// </param>
        /// <param name="siteNetworkServiceReferences"> The list of site network services on the site. </param>
        /// <returns> A new <see cref="HybridNetwork.SiteData"/> instance for mocking. </returns>
        public static SiteData SiteData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ProvisioningState? provisioningState = null, IEnumerable<NFVIs> nfvis = null, IEnumerable<WritableSubResource> siteNetworkServiceReferences = null)
        {
            tags ??= new Dictionary<string, string>();
            nfvis ??= new List<NFVIs>();
            siteNetworkServiceReferences ??= new List<WritableSubResource>();

            return new SiteData(id, name, resourceType, systemData, tags, location, provisioningState, nfvis?.ToList(), siteNetworkServiceReferences?.ToList());
        }

        /// <summary> Initializes a new instance of SiteNetworkServiceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The managed identity of the Site network service, if configured. </param>
        /// <param name="sku"> Sku of the site network service. </param>
        /// <param name="provisioningState"> The provisioning state of the site network service resource. </param>
        /// <param name="managedResourceGroupConfiguration"> Managed resource group configuration. </param>
        /// <param name="siteReferenceId"> The site details. </param>
        /// <param name="publisherName"> The publisher name for the site network service. </param>
        /// <param name="publisherScope"> The scope of the publisher. </param>
        /// <param name="networkServiceDesignGroupName"> The network service design group name for the site network service. </param>
        /// <param name="networkServiceDesignVersionName"> The network service design version for the site network service. </param>
        /// <param name="networkServiceDesignVersionOfferingLocation"> The location of the network service design offering. </param>
        /// <param name="desiredStateConfigurationGroupValueReferences"> The goal state of the site network service resource. This has references to the configuration group value objects that describe the desired state of the site network service. </param>
        /// <param name="lastStateNetworkServiceDesignVersionName"> The network service design version for the site network service. </param>
        /// <param name="lastStateConfigurationGroupValueReferences"> The last state of the site network service resource. </param>
        /// <returns> A new <see cref="HybridNetwork.SiteNetworkServiceData"/> instance for mocking. </returns>
        public static SiteNetworkServiceData SiteNetworkServiceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, ResourceManager.Models.SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, HybridNetworkSku sku = null, ProvisioningState? provisioningState = null, ManagedResourceGroupConfiguration managedResourceGroupConfiguration = null, ResourceIdentifier siteReferenceId = null, string publisherName = null, PublisherScope? publisherScope = null, string networkServiceDesignGroupName = null, string networkServiceDesignVersionName = null, string networkServiceDesignVersionOfferingLocation = null, IDictionary<string, WritableSubResource> desiredStateConfigurationGroupValueReferences = null, string lastStateNetworkServiceDesignVersionName = null, IReadOnlyDictionary<string, WritableSubResource> lastStateConfigurationGroupValueReferences = null)
        {
            tags ??= new Dictionary<string, string>();
            desiredStateConfigurationGroupValueReferences ??= new Dictionary<string, WritableSubResource>();
            lastStateConfigurationGroupValueReferences ??= new Dictionary<string, WritableSubResource>();

            return new SiteNetworkServiceData(id, name, resourceType, systemData, tags, location, identity, sku, provisioningState, managedResourceGroupConfiguration, siteReferenceId != null ? ResourceManagerModelFactory.WritableSubResource(siteReferenceId) : null, publisherName, publisherScope, networkServiceDesignGroupName, networkServiceDesignVersionName, networkServiceDesignVersionOfferingLocation, desiredStateConfigurationGroupValueReferences, lastStateNetworkServiceDesignVersionName, lastStateConfigurationGroupValueReferences);
        }

        /// <summary> Initializes a new instance of HybridNetworkSku. </summary>
        /// <param name="name"> Name of this Sku. </param>
        /// <param name="tier"> The SKU tier based on the SKU name. </param>
        /// <returns> A new <see cref="Models.HybridNetworkSku"/> instance for mocking. </returns>
        public static HybridNetworkSku HybridNetworkSku(HybridNetworkSkuName name = default, HybridNetworkSkuTier? tier = null)
        {
            return new HybridNetworkSku(name, tier);
        }

        /// <summary> Initializes a new instance of MappingRuleProfile. </summary>
        /// <param name="applicationEnablement"> The application enablement. </param>
        /// <returns> A new <see cref="Models.MappingRuleProfile"/> instance for mocking. </returns>
        public static MappingRuleProfile MappingRuleProfile(ApplicationEnablement? applicationEnablement = null)
        {
            return new MappingRuleProfile(applicationEnablement);
        }

        /// <summary> Initializes a new instance of AzureContainerRegistryScopedTokenCredential. </summary>
        /// <param name="username"> The username of the credential. </param>
        /// <param name="acrToken"> The credential value. </param>
        /// <param name="acrServerUri"> The Acr server url. </param>
        /// <param name="repositories"> The repositories that could be accessed using the current credential. </param>
        /// <param name="expiry"> The UTC time when credential will expire. </param>
        /// <returns> A new <see cref="Models.AzureContainerRegistryScopedTokenCredential"/> instance for mocking. </returns>
        public static AzureContainerRegistryScopedTokenCredential AzureContainerRegistryScopedTokenCredential(string username = null, string acrToken = null, Uri acrServerUri = null, IEnumerable<string> repositories = null, DateTimeOffset? expiry = null)
        {
            repositories ??= new List<string>();

            return new AzureContainerRegistryScopedTokenCredential(CredentialType.AzureContainerRegistryScopedToken, username, acrToken, acrServerUri, repositories?.ToList(), expiry);
        }

        /// <summary> Initializes a new instance of AzureStorageAccountCredential. </summary>
        /// <param name="storageAccountId"> The storage account Id. </param>
        /// <param name="containerCredentials"> The containers that could be accessed using the current credential. </param>
        /// <param name="expiry"> The UTC time when credential will expire. </param>
        /// <returns> A new <see cref="Models.AzureStorageAccountCredential"/> instance for mocking. </returns>
        public static AzureStorageAccountCredential AzureStorageAccountCredential(string storageAccountId = null, IEnumerable<AzureStorageAccountContainerCredential> containerCredentials = null, DateTimeOffset? expiry = null)
        {
            containerCredentials ??= new List<AzureStorageAccountContainerCredential>();

            return new AzureStorageAccountCredential(CredentialType.AzureStorageAccountToken, storageAccountId, containerCredentials?.ToList(), expiry);
        }

        /// <summary> Initializes a new instance of AzureStorageAccountContainerCredential. </summary>
        /// <param name="containerName"> The storage account container name. </param>
        /// <param name="containerSasUri"> The storage account container sas uri. </param>
        /// <returns> A new <see cref="Models.AzureStorageAccountContainerCredential"/> instance for mocking. </returns>
        public static AzureStorageAccountContainerCredential AzureStorageAccountContainerCredential(string containerName = null, Uri containerSasUri = null)
        {
            return new AzureStorageAccountContainerCredential(containerName, containerSasUri);
        }

        /// <summary> Initializes a new instance of AzureArcKubernetesDeployMappingRuleProfile. </summary>
        /// <param name="applicationEnablement"> The application enablement. </param>
        /// <param name="helmMappingRuleProfile"> The helm mapping rule profile. </param>
        /// <returns> A new <see cref="Models.AzureArcKubernetesDeployMappingRuleProfile"/> instance for mocking. </returns>
        public static AzureArcKubernetesDeployMappingRuleProfile AzureArcKubernetesDeployMappingRuleProfile(ApplicationEnablement? applicationEnablement = null, HelmMappingRuleProfile helmMappingRuleProfile = null)
        {
            return new AzureArcKubernetesDeployMappingRuleProfile(applicationEnablement, helmMappingRuleProfile);
        }

        /// <summary> Initializes a new instance of HelmMappingRuleProfile. </summary>
        /// <param name="releaseNamespace"> Helm release namespace. </param>
        /// <param name="releaseName"> Helm release name. </param>
        /// <param name="helmPackageVersion"> Helm package version. </param>
        /// <param name="values"> Helm release values. </param>
        /// <returns> A new <see cref="Models.HelmMappingRuleProfile"/> instance for mocking. </returns>
        public static HelmMappingRuleProfile HelmMappingRuleProfile(string releaseNamespace = null, string releaseName = null, string helmPackageVersion = null, string values = null)
        {
            return new HelmMappingRuleProfile(releaseNamespace, releaseName, helmPackageVersion, values);
        }

        /// <summary> Initializes a new instance of AzureCoreVhdImageDeployMappingRuleProfile. </summary>
        /// <param name="applicationEnablement"> The application enablement. </param>
        /// <param name="vhdImageMappingRuleUserConfiguration"> The vhd mapping rule profile. </param>
        /// <returns> A new <see cref="Models.AzureCoreVhdImageDeployMappingRuleProfile"/> instance for mocking. </returns>
        public static AzureCoreVhdImageDeployMappingRuleProfile AzureCoreVhdImageDeployMappingRuleProfile(ApplicationEnablement? applicationEnablement = null, string vhdImageMappingRuleUserConfiguration = null)
        {
            return new AzureCoreVhdImageDeployMappingRuleProfile(applicationEnablement, vhdImageMappingRuleUserConfiguration != null ? new VhdImageMappingRuleProfile(vhdImageMappingRuleUserConfiguration) : null);
        }

        /// <summary> Initializes a new instance of AzureCoreArmTemplateDeployMappingRuleProfile. </summary>
        /// <param name="applicationEnablement"> The application enablement. </param>
        /// <param name="templateParameters"> The template mapping rule profile. </param>
        /// <returns> A new <see cref="Models.AzureCoreArmTemplateDeployMappingRuleProfile"/> instance for mocking. </returns>
        public static AzureCoreArmTemplateDeployMappingRuleProfile AzureCoreArmTemplateDeployMappingRuleProfile(ApplicationEnablement? applicationEnablement = null, string templateParameters = null)
        {
            return new AzureCoreArmTemplateDeployMappingRuleProfile(applicationEnablement, templateParameters != null ? new ArmTemplateMappingRuleProfile(templateParameters) : null);
        }

        /// <summary> Initializes a new instance of HelmPackageApplicationOverview. </summary>
        /// <param name="name"> The name of the application. </param>
        /// <param name="deployParametersMappingRuleProfile"> The deployment parameters mapping rule profile. </param>
        /// <returns> A new <see cref="Models.HelmPackageApplicationOverview"/> instance for mocking. </returns>
        public static HelmPackageApplicationOverview HelmPackageApplicationOverview(string name = null, AzureArcKubernetesDeployMappingRuleProfile deployParametersMappingRuleProfile = null)
        {
            return new HelmPackageApplicationOverview(name, NetworkFunctionPublisherArtifactType.HelmPackage, deployParametersMappingRuleProfile);
        }

        /// <summary> Initializes a new instance of VhdImageFileApplicationOverview. </summary>
        /// <param name="name"> The name of the application. </param>
        /// <param name="deployParametersMappingRuleProfile"> The deployment parameters mapping rule profile. </param>
        /// <returns> A new <see cref="Models.VhdImageFileApplicationOverview"/> instance for mocking. </returns>
        public static VhdImageFileApplicationOverview VhdImageFileApplicationOverview(string name = null, AzureCoreVhdImageDeployMappingRuleProfile deployParametersMappingRuleProfile = null)
        {
            return new VhdImageFileApplicationOverview(name, NetworkFunctionPublisherArtifactType.VhdImageFile, deployParametersMappingRuleProfile);
        }

        /// <summary> Initializes a new instance of ArmTemplateApplicationOverview. </summary>
        /// <param name="name"> The name of the application. </param>
        /// <param name="deployParametersMappingRuleProfile"> The deployment parameters mapping rule profile. </param>
        /// <returns> A new <see cref="Models.ArmTemplateApplicationOverview"/> instance for mocking. </returns>
        public static ArmTemplateApplicationOverview ArmTemplateApplicationOverview(string name = null, AzureCoreArmTemplateDeployMappingRuleProfile deployParametersMappingRuleProfile = null)
        {
            return new ArmTemplateApplicationOverview(name, NetworkFunctionPublisherArtifactType.ArmTemplate, deployParametersMappingRuleProfile);
        }
    }
}
