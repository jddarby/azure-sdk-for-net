// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.HybridNetwork
{
    /// <summary>
    /// A class representing a collection of <see cref="NetworkServiceDesignGroupOverviewResource" /> and their operations.
    /// Each <see cref="NetworkServiceDesignGroupOverviewResource" /> in the collection will belong to the same instance of <see cref="ProxyPublisherOverviewResource" />.
    /// To get a <see cref="NetworkServiceDesignGroupOverviewCollection" /> instance call the GetNetworkServiceDesignGroupOverviews method from an instance of <see cref="ProxyPublisherOverviewResource" />.
    /// </summary>
    public partial class NetworkServiceDesignGroupOverviewCollection : ArmCollection
    {
        private readonly ClientDiagnostics _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsClientDiagnostics;
        private readonly ProxyNetworkServiceDesignGroupsRestOperations _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsRestClient;

        /// <summary> Initializes a new instance of the <see cref="NetworkServiceDesignGroupOverviewCollection"/> class for mocking. </summary>
        protected NetworkServiceDesignGroupOverviewCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="NetworkServiceDesignGroupOverviewCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal NetworkServiceDesignGroupOverviewCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridNetwork", NetworkServiceDesignGroupOverviewResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(NetworkServiceDesignGroupOverviewResource.ResourceType, out string networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsApiVersion);
            _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsRestClient = new ProxyNetworkServiceDesignGroupsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ProxyPublisherOverviewResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ProxyPublisherOverviewResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get information about network service design overview.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkServiceDesignGroups/{networkServiceDesignGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkServiceDesignGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkServiceDesignGroupName"> The name of the network service design group. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkServiceDesignGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkServiceDesignGroupName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        public virtual async Task<Response<NetworkServiceDesignGroupOverviewResource>> GetAsync(string networkServiceDesignGroupName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkServiceDesignGroupName, nameof(networkServiceDesignGroupName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var scope = _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsClientDiagnostics.CreateScope("NetworkServiceDesignGroupOverviewCollection.Get");
            scope.Start();
            try
            {
                var response = await _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsRestClient.GetAsync(Id.SubscriptionId, Id.Name, networkServiceDesignGroupName, publisherScopeName, publisherLocationName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new NetworkServiceDesignGroupOverviewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get information about network service design overview.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkServiceDesignGroups/{networkServiceDesignGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkServiceDesignGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkServiceDesignGroupName"> The name of the network service design group. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkServiceDesignGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkServiceDesignGroupName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        public virtual Response<NetworkServiceDesignGroupOverviewResource> Get(string networkServiceDesignGroupName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkServiceDesignGroupName, nameof(networkServiceDesignGroupName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var scope = _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsClientDiagnostics.CreateScope("NetworkServiceDesignGroupOverviewCollection.Get");
            scope.Start();
            try
            {
                var response = _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsRestClient.Get(Id.SubscriptionId, Id.Name, networkServiceDesignGroupName, publisherScopeName, publisherLocationName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new NetworkServiceDesignGroupOverviewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all available network service design group under a publisher.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkServiceDesignGroups</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkServiceDesignGroups_ListByPublisher</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        /// <returns> An async collection of <see cref="NetworkServiceDesignGroupOverviewResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NetworkServiceDesignGroupOverviewResource> GetAllAsync(string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsRestClient.CreateListByPublisherRequest(Id.SubscriptionId, Id.Name, publisherScopeName, publisherLocationName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsRestClient.CreateListByPublisherNextPageRequest(nextLink, Id.SubscriptionId, Id.Name, publisherScopeName, publisherLocationName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new NetworkServiceDesignGroupOverviewResource(Client, NetworkServiceDesignGroupOverviewData.DeserializeNetworkServiceDesignGroupOverviewData(e)), _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsClientDiagnostics, Pipeline, "NetworkServiceDesignGroupOverviewCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all available network service design group under a publisher.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkServiceDesignGroups</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkServiceDesignGroups_ListByPublisher</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        /// <returns> A collection of <see cref="NetworkServiceDesignGroupOverviewResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NetworkServiceDesignGroupOverviewResource> GetAll(string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsRestClient.CreateListByPublisherRequest(Id.SubscriptionId, Id.Name, publisherScopeName, publisherLocationName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsRestClient.CreateListByPublisherNextPageRequest(nextLink, Id.SubscriptionId, Id.Name, publisherScopeName, publisherLocationName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new NetworkServiceDesignGroupOverviewResource(Client, NetworkServiceDesignGroupOverviewData.DeserializeNetworkServiceDesignGroupOverviewData(e)), _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsClientDiagnostics, Pipeline, "NetworkServiceDesignGroupOverviewCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkServiceDesignGroups/{networkServiceDesignGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkServiceDesignGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkServiceDesignGroupName"> The name of the network service design group. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkServiceDesignGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkServiceDesignGroupName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string networkServiceDesignGroupName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkServiceDesignGroupName, nameof(networkServiceDesignGroupName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var scope = _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsClientDiagnostics.CreateScope("NetworkServiceDesignGroupOverviewCollection.Exists");
            scope.Start();
            try
            {
                var response = await _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsRestClient.GetAsync(Id.SubscriptionId, Id.Name, networkServiceDesignGroupName, publisherScopeName, publisherLocationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkServiceDesignGroups/{networkServiceDesignGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkServiceDesignGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkServiceDesignGroupName"> The name of the network service design group. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkServiceDesignGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkServiceDesignGroupName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        public virtual Response<bool> Exists(string networkServiceDesignGroupName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkServiceDesignGroupName, nameof(networkServiceDesignGroupName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var scope = _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsClientDiagnostics.CreateScope("NetworkServiceDesignGroupOverviewCollection.Exists");
            scope.Start();
            try
            {
                var response = _networkServiceDesignGroupOverviewProxyNetworkServiceDesignGroupsRestClient.Get(Id.SubscriptionId, Id.Name, networkServiceDesignGroupName, publisherScopeName, publisherLocationName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
