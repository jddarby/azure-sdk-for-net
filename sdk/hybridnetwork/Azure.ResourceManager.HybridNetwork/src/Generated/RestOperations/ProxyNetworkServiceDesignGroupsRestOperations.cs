// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.HybridNetwork.Models;

namespace Azure.ResourceManager.HybridNetwork
{
    internal partial class ProxyNetworkServiceDesignGroupsRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of ProxyNetworkServiceDesignGroupsRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public ProxyNetworkServiceDesignGroupsRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2023-09-01";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal HttpMessage CreateListByPublisherRequest(string subscriptionId, string proxyPublisherName, string publisherScopeName, string publisherLocationName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.HybridNetwork/proxyPublishers/", false);
            uri.AppendPath(proxyPublisherName, true);
            uri.AppendPath("/networkServiceDesignGroups", false);
            uri.AppendQuery("publisherScopeName", publisherScopeName, true);
            uri.AppendQuery("publisherLocationName", publisherLocationName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Lists all available network service design group under a publisher. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="proxyPublisherName"> The name of the proxy publisher. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="proxyPublisherName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="proxyPublisherName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<NetworkServiceDesignGroupOverviewListResult>> ListByPublisherAsync(string subscriptionId, string proxyPublisherName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(proxyPublisherName, nameof(proxyPublisherName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var message = CreateListByPublisherRequest(subscriptionId, proxyPublisherName, publisherScopeName, publisherLocationName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NetworkServiceDesignGroupOverviewListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = NetworkServiceDesignGroupOverviewListResult.DeserializeNetworkServiceDesignGroupOverviewListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists all available network service design group under a publisher. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="proxyPublisherName"> The name of the proxy publisher. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="proxyPublisherName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="proxyPublisherName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<NetworkServiceDesignGroupOverviewListResult> ListByPublisher(string subscriptionId, string proxyPublisherName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(proxyPublisherName, nameof(proxyPublisherName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var message = CreateListByPublisherRequest(subscriptionId, proxyPublisherName, publisherScopeName, publisherLocationName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NetworkServiceDesignGroupOverviewListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = NetworkServiceDesignGroupOverviewListResult.DeserializeNetworkServiceDesignGroupOverviewListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string proxyPublisherName, string networkServiceDesignGroupName, string publisherScopeName, string publisherLocationName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.HybridNetwork/proxyPublishers/", false);
            uri.AppendPath(proxyPublisherName, true);
            uri.AppendPath("/networkServiceDesignGroups/", false);
            uri.AppendPath(networkServiceDesignGroupName, true);
            uri.AppendQuery("publisherScopeName", publisherScopeName, true);
            uri.AppendQuery("publisherLocationName", publisherLocationName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Get information about network service design overview. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="proxyPublisherName"> The name of the proxy publisher. </param>
        /// <param name="networkServiceDesignGroupName"> The name of the network service design group. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="proxyPublisherName"/>, <paramref name="networkServiceDesignGroupName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="proxyPublisherName"/> or <paramref name="networkServiceDesignGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<NetworkServiceDesignGroupOverviewData>> GetAsync(string subscriptionId, string proxyPublisherName, string networkServiceDesignGroupName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(proxyPublisherName, nameof(proxyPublisherName));
            Argument.AssertNotNullOrEmpty(networkServiceDesignGroupName, nameof(networkServiceDesignGroupName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var message = CreateGetRequest(subscriptionId, proxyPublisherName, networkServiceDesignGroupName, publisherScopeName, publisherLocationName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NetworkServiceDesignGroupOverviewData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = NetworkServiceDesignGroupOverviewData.DeserializeNetworkServiceDesignGroupOverviewData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((NetworkServiceDesignGroupOverviewData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Get information about network service design overview. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="proxyPublisherName"> The name of the proxy publisher. </param>
        /// <param name="networkServiceDesignGroupName"> The name of the network service design group. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="proxyPublisherName"/>, <paramref name="networkServiceDesignGroupName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="proxyPublisherName"/> or <paramref name="networkServiceDesignGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<NetworkServiceDesignGroupOverviewData> Get(string subscriptionId, string proxyPublisherName, string networkServiceDesignGroupName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(proxyPublisherName, nameof(proxyPublisherName));
            Argument.AssertNotNullOrEmpty(networkServiceDesignGroupName, nameof(networkServiceDesignGroupName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var message = CreateGetRequest(subscriptionId, proxyPublisherName, networkServiceDesignGroupName, publisherScopeName, publisherLocationName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NetworkServiceDesignGroupOverviewData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = NetworkServiceDesignGroupOverviewData.DeserializeNetworkServiceDesignGroupOverviewData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((NetworkServiceDesignGroupOverviewData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByPublisherNextPageRequest(string nextLink, string subscriptionId, string proxyPublisherName, string publisherScopeName, string publisherLocationName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> Lists all available network service design group under a publisher. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="proxyPublisherName"> The name of the proxy publisher. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="proxyPublisherName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="proxyPublisherName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<NetworkServiceDesignGroupOverviewListResult>> ListByPublisherNextPageAsync(string nextLink, string subscriptionId, string proxyPublisherName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(proxyPublisherName, nameof(proxyPublisherName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var message = CreateListByPublisherNextPageRequest(nextLink, subscriptionId, proxyPublisherName, publisherScopeName, publisherLocationName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NetworkServiceDesignGroupOverviewListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = NetworkServiceDesignGroupOverviewListResult.DeserializeNetworkServiceDesignGroupOverviewListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists all available network service design group under a publisher. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="proxyPublisherName"> The name of the proxy publisher. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="proxyPublisherName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> or <paramref name="proxyPublisherName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<NetworkServiceDesignGroupOverviewListResult> ListByPublisherNextPage(string nextLink, string subscriptionId, string proxyPublisherName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(proxyPublisherName, nameof(proxyPublisherName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var message = CreateListByPublisherNextPageRequest(nextLink, subscriptionId, proxyPublisherName, publisherScopeName, publisherLocationName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NetworkServiceDesignGroupOverviewListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = NetworkServiceDesignGroupOverviewListResult.DeserializeNetworkServiceDesignGroupOverviewListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
