// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.HybridNetwork.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.HybridNetwork
{
    public partial class NetworkFunctionDefinitionVersionOverviewData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(VersionState))
            {
                writer.WritePropertyName("versionState"u8);
                writer.WriteStringValue(VersionState.Value.ToString());
            }
            if (Optional.IsDefined(NetworkFunctionType))
            {
                writer.WritePropertyName("networkFunctionType"u8);
                writer.WriteStringValue(NetworkFunctionType.Value.ToString());
            }
            if (Optional.IsDefined(NfviType))
            {
                writer.WritePropertyName("nfviType"u8);
                writer.WriteStringValue(NfviType.Value.ToString());
            }
            if (Optional.IsCollectionDefined(NetworkFunctionApplications))
            {
                writer.WritePropertyName("networkFunctionApplications"u8);
                writer.WriteStartArray();
                foreach (var item in NetworkFunctionApplications)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static NetworkFunctionDefinitionVersionOverviewData DeserializeNetworkFunctionDefinitionVersionOverviewData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<ResourceManager.Models.SystemData> systemData = default;
            Optional<string> description = default;
            Optional<VersionState> versionState = default;
            Optional<NetworkFunctionType> networkFunctionType = default;
            Optional<NfviType> nfviType = default;
            Optional<string> deployParameters = default;
            Optional<IList<NetworkFunctionDefinitionApplicationOverview>> networkFunctionApplications = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<ResourceManager.Models.SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("versionState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            versionState = new VersionState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("networkFunctionType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            networkFunctionType = new NetworkFunctionType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("nfviType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            nfviType = new NfviType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("deployParameters"u8))
                        {
                            deployParameters = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("networkFunctionApplications"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<NetworkFunctionDefinitionApplicationOverview> array = new List<NetworkFunctionDefinitionApplicationOverview>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(NetworkFunctionDefinitionApplicationOverview.DeserializeNetworkFunctionDefinitionApplicationOverview(item));
                            }
                            networkFunctionApplications = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new NetworkFunctionDefinitionVersionOverviewData(id, name, type, systemData.Value, description.Value, Optional.ToNullable(versionState), Optional.ToNullable(networkFunctionType), Optional.ToNullable(nfviType), deployParameters.Value, Optional.ToList(networkFunctionApplications));
        }
    }
}
