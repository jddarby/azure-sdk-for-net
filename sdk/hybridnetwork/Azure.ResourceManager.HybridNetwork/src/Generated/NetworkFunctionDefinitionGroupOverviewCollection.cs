// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.HybridNetwork
{
    /// <summary>
    /// A class representing a collection of <see cref="NetworkFunctionDefinitionGroupOverviewResource" /> and their operations.
    /// Each <see cref="NetworkFunctionDefinitionGroupOverviewResource" /> in the collection will belong to the same instance of <see cref="ProxyPublisherOverviewResource" />.
    /// To get a <see cref="NetworkFunctionDefinitionGroupOverviewCollection" /> instance call the GetNetworkFunctionDefinitionGroupOverviews method from an instance of <see cref="ProxyPublisherOverviewResource" />.
    /// </summary>
    public partial class NetworkFunctionDefinitionGroupOverviewCollection : ArmCollection
    {
        private readonly ClientDiagnostics _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsClientDiagnostics;
        private readonly ProxyNetworkFunctionDefinitionGroupsRestOperations _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsRestClient;

        /// <summary> Initializes a new instance of the <see cref="NetworkFunctionDefinitionGroupOverviewCollection"/> class for mocking. </summary>
        protected NetworkFunctionDefinitionGroupOverviewCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="NetworkFunctionDefinitionGroupOverviewCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal NetworkFunctionDefinitionGroupOverviewCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.HybridNetwork", NetworkFunctionDefinitionGroupOverviewResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(NetworkFunctionDefinitionGroupOverviewResource.ResourceType, out string networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsApiVersion);
            _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsRestClient = new ProxyNetworkFunctionDefinitionGroupsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != ProxyPublisherOverviewResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, ProxyPublisherOverviewResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get information about network function definition overview.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkFunctionDefinitionGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkFunctionDefinitionGroupName"> The name of the network function definition group. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkFunctionDefinitionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkFunctionDefinitionGroupName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        public virtual async Task<Response<NetworkFunctionDefinitionGroupOverviewResource>> GetAsync(string networkFunctionDefinitionGroupName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkFunctionDefinitionGroupName, nameof(networkFunctionDefinitionGroupName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var scope = _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsClientDiagnostics.CreateScope("NetworkFunctionDefinitionGroupOverviewCollection.Get");
            scope.Start();
            try
            {
                var response = await _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsRestClient.GetAsync(Id.SubscriptionId, Id.Name, networkFunctionDefinitionGroupName, publisherScopeName, publisherLocationName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new NetworkFunctionDefinitionGroupOverviewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get information about network function definition overview.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkFunctionDefinitionGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkFunctionDefinitionGroupName"> The name of the network function definition group. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkFunctionDefinitionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkFunctionDefinitionGroupName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        public virtual Response<NetworkFunctionDefinitionGroupOverviewResource> Get(string networkFunctionDefinitionGroupName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkFunctionDefinitionGroupName, nameof(networkFunctionDefinitionGroupName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var scope = _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsClientDiagnostics.CreateScope("NetworkFunctionDefinitionGroupOverviewCollection.Get");
            scope.Start();
            try
            {
                var response = _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsRestClient.Get(Id.SubscriptionId, Id.Name, networkFunctionDefinitionGroupName, publisherScopeName, publisherLocationName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new NetworkFunctionDefinitionGroupOverviewResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists all available network function definition group under a publisher.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkFunctionDefinitionGroups</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkFunctionDefinitionGroups_ListByPublisher</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        /// <returns> An async collection of <see cref="NetworkFunctionDefinitionGroupOverviewResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<NetworkFunctionDefinitionGroupOverviewResource> GetAllAsync(string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsRestClient.CreateListByPublisherRequest(Id.SubscriptionId, Id.Name, publisherScopeName, publisherLocationName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsRestClient.CreateListByPublisherNextPageRequest(nextLink, Id.SubscriptionId, Id.Name, publisherScopeName, publisherLocationName);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new NetworkFunctionDefinitionGroupOverviewResource(Client, NetworkFunctionDefinitionGroupOverviewData.DeserializeNetworkFunctionDefinitionGroupOverviewData(e)), _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsClientDiagnostics, Pipeline, "NetworkFunctionDefinitionGroupOverviewCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Lists all available network function definition group under a publisher.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkFunctionDefinitionGroups</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkFunctionDefinitionGroups_ListByPublisher</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        /// <returns> A collection of <see cref="NetworkFunctionDefinitionGroupOverviewResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<NetworkFunctionDefinitionGroupOverviewResource> GetAll(string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            HttpMessage FirstPageRequest(int? pageSizeHint) => _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsRestClient.CreateListByPublisherRequest(Id.SubscriptionId, Id.Name, publisherScopeName, publisherLocationName);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsRestClient.CreateListByPublisherNextPageRequest(nextLink, Id.SubscriptionId, Id.Name, publisherScopeName, publisherLocationName);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new NetworkFunctionDefinitionGroupOverviewResource(Client, NetworkFunctionDefinitionGroupOverviewData.DeserializeNetworkFunctionDefinitionGroupOverviewData(e)), _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsClientDiagnostics, Pipeline, "NetworkFunctionDefinitionGroupOverviewCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkFunctionDefinitionGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkFunctionDefinitionGroupName"> The name of the network function definition group. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkFunctionDefinitionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkFunctionDefinitionGroupName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string networkFunctionDefinitionGroupName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkFunctionDefinitionGroupName, nameof(networkFunctionDefinitionGroupName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var scope = _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsClientDiagnostics.CreateScope("NetworkFunctionDefinitionGroupOverviewCollection.Exists");
            scope.Start();
            try
            {
                var response = await _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsRestClient.GetAsync(Id.SubscriptionId, Id.Name, networkFunctionDefinitionGroupName, publisherScopeName, publisherLocationName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridNetwork/proxyPublishers/{proxyPublisherName}/networkFunctionDefinitionGroups/{networkFunctionDefinitionGroupName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ProxyNetworkFunctionDefinitionGroups_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="networkFunctionDefinitionGroupName"> The name of the network function definition group. </param>
        /// <param name="publisherScopeName"> The name of the publisher scope. </param>
        /// <param name="publisherLocationName"> The name of the publisher location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="networkFunctionDefinitionGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="networkFunctionDefinitionGroupName"/>, <paramref name="publisherScopeName"/> or <paramref name="publisherLocationName"/> is null. </exception>
        public virtual Response<bool> Exists(string networkFunctionDefinitionGroupName, string publisherScopeName, string publisherLocationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkFunctionDefinitionGroupName, nameof(networkFunctionDefinitionGroupName));
            Argument.AssertNotNull(publisherScopeName, nameof(publisherScopeName));
            Argument.AssertNotNull(publisherLocationName, nameof(publisherLocationName));

            using var scope = _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsClientDiagnostics.CreateScope("NetworkFunctionDefinitionGroupOverviewCollection.Exists");
            scope.Start();
            try
            {
                var response = _networkFunctionDefinitionGroupOverviewProxyNetworkFunctionDefinitionGroupsRestClient.Get(Id.SubscriptionId, Id.Name, networkFunctionDefinitionGroupName, publisherScopeName, publisherLocationName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
